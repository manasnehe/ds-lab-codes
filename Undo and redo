#include <iostream>
using namespace std;
#define SIZE 100

// Stack class implementation
class Stack {
    string data[SIZE];
    int top;

public:
    Stack() { top = -1; }

    void push(string value) {
        if (top == SIZE - 1) {
            cout << "Stack Overflow!\n";
            return;
        }
        top++;
        data[top] = value;
    }

    string pop() {
        if (top == -1) {
            cout << "Stack Underflow!\n";
            return "";
        }
        string temp = data[top];
        top--;
        return temp;
    }

    bool isEmpty() {
        return (top == -1);
    }

    string peek() {
        if (top == -1)
            return "";
        return data[top];
    }

    void clear() {
        top = -1;
    }
};

// Main Program
int main() {
    Stack undoStack, redoStack;
    string document = "";
    int choice;
    string change;

    do {
        cout << "\n===== TEXT EDITOR MENU =====\n";
        cout << "1. Make a Change\n";
        cout << "2. Undo Action\n";
        cout << "3. Redo Action\n";
        cout << "4. Display Document\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // to clear input buffer

        switch (choice) {
        case 1:
            cout << "Enter change text: ";
            getline(cin, change);
            document += change; // append new text
            undoStack.push(document); // save new state
            redoStack.clear(); // clear redo history
            cout << "Change saved!\n";
            break;

        case 2:
            if (!undoStack.isEmpty()) {
                string last = undoStack.pop(); // remove current
                redoStack.push(last);          // move to redo stack

                if (!undoStack.isEmpty())
                    document = undoStack.peek(); // previous version
                else
                    document = ""; // empty document if nothing left

                cout << "Undo performed.\n";
            } else {
                cout << "Nothing to undo!\n";
            }
            break;

        case 3:
            if (!redoStack.isEmpty()) {
                string redoText = redoStack.pop();
                undoStack.push(redoText);
                document = redoText;
                cout << "Redo performed.\n";
            } else {
                cout << "Nothing to redo!\n";
            }
            break;

        case 4:
            cout << "Current Document: " << document << "\n";
            break;

        case 5:
            cout << "Exiting...\n";
            break;

        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 5);

    return 0;
}
