#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// ---------- DFS using Adjacency Matrix ----------
void DFS(int start, vector<vector<int>>& adjMatrix, vector<bool>& visited, int n) {
    cout << char(start + 'A') << " ";
    visited[start] = true;

    for (int i = 0; i < n; i++) {
        if (adjMatrix[start][i] == 1 && !visited[i]) {
            DFS(i, adjMatrix, visited, n);
        }
    }
}

// ---------- BFS using Adjacency List ----------
void BFS(int start, vector<vector<int>>& adjList, int n) {
    vector<bool> visited(n, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << char(node + 'A') << " ";

        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int n = 5; // Number of locations (A-E)
    vector<vector<int>> adjMatrix(n, vector<int>(n, 0));
    vector<vector<int>> adjList(n);

    // Defining routes between locations
    // A-B, A-C, B-D, C-E
    adjMatrix[0][1] = adjMatrix[1][0] = 1;
    adjMatrix[0][2] = adjMatrix[2][0] = 1;
    adjMatrix[1][3] = adjMatrix[3][1] = 1;
    adjMatrix[2][4] = adjMatrix[4][2] = 1;

    // Adjacency List representation for BFS
    adjList[0] = {1, 2};
    adjList[1] = {0, 3};
    adjList[2] = {0, 4};
    adjList[3] = {1};
    adjList[4] = {2};

    cout << "Depth First Search (DFS) using Adjacency Matrix:\n";
    vector<bool> visited(n, false);
    DFS(0, adjMatrix, visited, n); // Starting from A
    cout << endl;

    cout << "\nBreadth First Search (BFS) using Adjacency List:\n";
    BFS(0, adjList, n); // Starting from A
    cout << endl;

    return 0;
}
